import { getAssetFromKV } from '@cloudflare/kv-asset-handler';

// Event listener for all incoming fetch requests to the Worker
addEventListener('fetch', event => {
  event.respondWith(handleEvent(event));
});

/**
 * Handles the incoming fetch event.
 * @param {FetchEvent} event The fetch event object.
 * @returns {Response} The response to the client.
 */
async function handleEvent(event) {
  try {
    // Attempt to get the asset from KV, using the ASSETS binding
    return await getAssetFromKV(event, {
      ASSET_NAMESPACE: ASSETS, // This refers to the R2 binding named ASSETS in wrangler.toml
      ASSET_MANIFEST: __STATIC_CONTENT_MANIFEST, // This is auto-generated by Wrangler for static sites
    });
  } catch (e) {
    // If the asset is not found (e.g., 404), try to serve index.html as a fallback
    // This is common for single-page applications (SPAs)
    if (e.status === 404) {
      try {
        return await getAssetFromKV(event, {
          ASSET_NAMESPACE: ASSETS,
          ASSET_MANIFEST: __STATIC_CONTENT_MANIFEST,
          mapRequestToAsset: req => new Request(new URL(req.url).origin + '/index.html', req),
        });
      } catch (error) {
        // If even index.html fallback fails, return a generic 404
        const pathname = new URL(event.request.url).pathname;
        return new Response('"' + pathname + '" not found', {
          status: 404,
          headers: { 'Content-Type': 'text/plain' },
        });
      }
    }

    // For other types of errors, return a 500 response
    return new Response('An unexpected error occurred', {
      status: 500,
      headers: { 'Content-Type': 'text/plain' },
    });
  }
}